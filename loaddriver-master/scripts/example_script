--[[
	example profile. Sends cyclical requests to frontend endpoints.
	Simply visits all main pages in order.
	Does not perform any actions that would change the database.
--]]

--[[
	Global Variables. Initialized at load driver startup.
--]]
prefix = "http://frontend/"

--[[
	Gets called at the beginning of each "call cycle", perform as much work as possible here.
	Initialize all global variables here.
	Note that math.random is already initialized using a fixed seed (5) for reproducibility.
--]]
function onCycle()
	userpostfix = 1 + math.random(90)
	calls = {
		"",
		"run-experiment",
		"history",
		"intensities",
		"scripts",
		"slaves"
	}
end

--[[
	Gets called with ever increasing callnums for each http call until it returns nil.
	Once it returns nil, onCycle() is called again and callnum is reset to 1 (Lua convention).

	Here, you can use our HTML helper functions for conditional calls on returned texts (usually HTML, thus the name).
	We offer:
	- html.getMatches( regex )
		Returns all lines in the returned text stream that match a provided regex.
	- html.extractMatches( prefixRegex, postfixRegex )
		Returns all matches that are preceeded by a prefixRegex match and followed by a postfixRegex match.
		The regexes must have one unique match for each line in which they apply.
	- html.extractMatches( prefixRegex, matchingRegex, postfixRegex )
		Variant of extractMatches with a matching regex defining the string that is to be extracted.
--]]
function onCall(callnum)
	return prefix..calls[callnum]
end

--[[
	You can also define custom functions that can be used during the onCycle() and onCall(callnum) functions.
--]]
function exampleFunc()
	return 42
end
